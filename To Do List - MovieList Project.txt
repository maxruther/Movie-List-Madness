Movie List Project
------------------


TO DO:

- Creating programs that act as updating the db, rather than regenerating it from scratch. Then code the 'regenerate from scratch' process to mandate fresh requesting through OMDB API.

- Switch from pymysql to SQLAlchemy, throughout the program?

- SQL-Constrain rating fields to decimals between 0 and 1, inclusive? (SQL & 'omdb builder.py')



BIG TO DO:

- Use Pandas instead of "list[list[str | list[str | int] ] ]" ?

- Recode OMDB_builder.py so that it only requests records for the newly added movies?

- Does the primary key need to be considered more intentionally?
	- Might it be problematic for analysis that the Movie_ID s reindexed at every new processing of the 		watchlist?
	





SQL:





DONE

- Added checks to help ensure against discrepancies between the keys of the added and loaded movie records. Done to address this situation: "When a new movielist with added movies is processed by movie_list_ingestor, but the omdb_builder method doesn't request new OMDB records through the API, there will be INCONGRUITY BETWEEN THE TABLES' KEYS."

9/3/24


- Script 'recreate_movie_list_db.py' now runs the following scripts' main methods, in proper sequence: movie_list_ingestor.py, omdb_builder.py, and amend_CR_table.py .
- Rename 'omdb_abrvd' table to 'omdb' ?
- The "gnr8_2d_data_genre" method should simply make the attributes/header the first row in the data
  it returns. Then the "gnr8_table" methods should simply reference that first row when constructing
  the 'CREATE TABLE' statement.
- Implement error in get_omdb_data(), so that invalid 'method' results in error, rather than None return.
- Have genre table use Movie ID as a foreign key, referencing allmovies table. (Currently coded
  but commented out, and I'm unsure of its correctness.)
- Function signatures classed up, proper.
- Function descriptions should be in triple-quotes for docustring functionality.
- UPDATE PROCEDURE DEFINITIONS in the SQL files!! Have them match what's shown in MySQL Workbench.
- In movie_list_ingestor.py , add comments to the methods that generate SQL statements for the Evernote data.
- Put SQL-statement generators in separate file, to be imported.
- The review_remedies need each be defined as functions rather than statements that will run upon import.
- The Ebert file should be changed so that '-1' values are instead simply missing, or NA.
- Refine the "Amending_CR_table" document so that it includes and explains the various processes that
  put the finishing touches on the critic_ratings table.
- Add RT_Score amending for the critic_ratings table.
- Request Developer token from Evernote
- The Python ingestion script needs to run the getWatched() procedure. (Should be quick.)
- Create a procedure that generates allUnwatched
- The SQL procedures can be defined in SQL scripts, but the Python script should handle the running of things.
- Consider aggregating unwatched movies from non-backburning tables into an allUnwatched
	- Have the aggregating procedure assign 'priority rank' based on the 'og' source table.

- Make it so that the "og" movie tables are automatically generated with the proper constraints:
	- Constrain "Watched" and "Watched in theater" domain to values 1 and 0 only.
	- Make Primary Key out of Title + Director

- Add a "native index" attribute during ingestion, so that the original ordering of the tables can be recreated in SQL.

- Create a stored procedure, "getWatched()", that creates an " allWatched table that lists all watched movies. It must always expect duplicates amongst the tables, as such duplicate entry is the current method of attributing genre.
	- It was a little tricky adjusting to the MySQL syntax for defining procedures, particularly for loops using cursors. I was also slow to see the critical importance of changing the Delimiter setting away from ';'.
	- It was VERY tricky getting the prepared statement to work, so that I could query tables that are only provided at runtime.
	- 